Note 本文档记录了android开发中偶尔要看的备忘。

android layout的一些注意事项
 1. 最常用的布局是LinearLayout,RelativeLayout和FrameLayout
2. gravity属性对于LinearLayout和RelativeLayout有效，对FrameLayout无效
3. layout_gravity属性对于FrameLayout有效，对于LinearLayout内部元素部分有效（和orientation有关，如果是vertical，则top和bottom无效，反之，则left和right无效），对于RelativeLayout内部元素无效
4. LinearLayout中的layout_weight属性，由于这个属性有点诡异，如果想正常的发挥作用，其layout_width（orientation=horizontal）或者layout_height(orientation=vertical)最好设成0dp
5. margin这个属性，不是上下左右都一定能生效的，一般来说，左上角的margin能生效，右下角的margin就未必了
6.LinearLayout中元素无法直接覆盖，把margin设成负值可以覆盖。
7.RelativeLayout和FrameLayout默认都是从左上角开始一层一层的叠上去的，如果上层不设背景或者背景透明的话，下层的东西还是可以可见并且可以点击的，即使看不见了，下层的东西也还是可以被点击到并触发其点击事件


android 使用Monkey进行压力测试。
墙内免vpn下载sdk 进入超级ping，在ip或域名内输入g.cn，然后点击查询，讲得到一系列的iP地址，选择任意一个，在sdk manager中设置proxy的ip和端口(80)，然后reload。你会发现的下载速度杠杠的

SDK
 1:使用友盟进行apk的自动更新
 2:使用shareSDK进行社会化分享
 3:使用极光做推送
 4：使用

Android Studio开发入门-引用jar及so文件 http://www.cnblogs.com/xrwang/p/AndroidStudioImportJarAndSoLibrary.html
一、引用jar文件
    1.将jar文件复制、粘贴到app的libs目录中；
    2.右键点击jar文件，并点击弹出菜单中的“Add As Library”，将jar文件作为类库添加到项目中；
    3.选择指定的类库。
    二、引用so文件
        网上有很多引用so文件的方法，多数都很麻烦，在KYLE THIELK的博客中找到了一种简单的方法。
        1.在“src/main”目录中新建名为“jniLibs”的目录；
        2.将so文件复制、粘贴到“jniLibs”目录内。
libs
1：一款漂亮实用的Android开源日期控件timessquare
2:推荐一个Android开发懒人库 -- ButterKnife
3: Android图表引擎AChartEngine

----有用的网络接口---------
百度出了个api store可以查询各类服务 http://apistore.baidu.com/   最重要了。
身份证号码查询：http://apistore.baidu.com/apiworks/servicedetail/113.html
手机号码：http://apistore.baidu.com/apiworks/servicedetail/117.html
天气查询 http://apistore.baidu.com/apiworks/servicedetail/112.html

图灵也出了个api 图灵机器人
http://www.tuling123.com/openapi/api?key=0697f52f60f49d3a607ea09cb4e94c4a&info=帮我查一下听日广州天气
http://www.tuling123.com/openapi/modules.do?name=show

http://www.juhe.cn/                     聚合数据              目前很多接口都收费
https://www.showapi.com                 易源接口              存在收费项                            API接口少
http://www.atool.org/httptest.php       在线http请求

------有用的网站--------
http://stackoverflow.com/  问题解决网站
http://www.androiddevtools.cn/
收集整理Android开发所需的Android SDK、开发中用到的工具、Android开发教程、Android设计规范，免费的设计素材等。
http://wear.techbrood.com
Android developer 最新国内镜像：http://wear.techbrood.com，包含Android最新文档以及Android Wear，Android TV，Android Auto各个子领域方面的内容。
Android 开源项目分类汇总
http://www.cnblogs.com/deBug-hao/p/4730959.html

----博客---------------
http://blog.csdn.net/lmj623565791 ;鸿洋_
http://blog.csdn.net/guolin_blog     郭霖
http://blog.csdn.net/luoshengyang   罗升阳
http://blog.csdn.net/xiaanming   
http://www.cnblogs.com/JczmDeveloper/ Jamy Cai
http://blog.csdn.net/singwhatiwanna  任玉刚  https://github.com/singwhatiwanna
http://blog.csdn.net/xyz_lmn  张兴业 有设计ui的特长

-----------------------工具----------------
json 在线自动生成java代码工具 http://api.stay4it.com/json/index.html

 1:----------Fragment  transaction.replace() VS transaction.add() hide() show()------------
 Fragment销毁时replace和add两个方法的区别 http://m.blog.csdn.net/blog/shimiso/44677007#
 那么最合适的处理方式是这样的：
 在add的时候，加上一个tab参数transaction.add(R.id.content, IndexFragment,”Tab1″);
 然后当IndexFragment引用被回收置空的话，先通过IndexFragment＝FragmentManager.findFragmentByTag(“Tab1″);
 找到对应的引用，然后继续上面的hide,show;

 2:-------------TextView,Button,EditText 如果要做到按下去有变化，请使用selector--------------
 点击父布局 使子控件（TextView等）响应点击效果 （子控件中加上这个属性 duplicateParentState）。
 例如：组件RelativeLayout上有两个TextView，这两个TextView具有不同的颜色值，现在要的效果是，当RelativeLayout被点击时，整个item有高亮背景。
 同时这两个TextView要变色。就是父控件响应点击事件，子View不响应点击事件，但是颜色要随着点击而发生变化。这样就用到了属性duplicateParentState。
 android:duplicateParentState，如果设置此属性，将直接从父容器中获取绘图状态（光标，按下等）。
 注意仅仅是获取绘图状态，而没有获取事件，也就是你点一下LinearLayout时Button有被点击的效果，但是不执行点击事件。
 在TextView中设置字体颜色一般使用，android:textColor="@color/red"，但是我们在使用selector动态修改字体颜色的时候要使用android:color="@color/red"。
 代码来设置textColor 的，需要用 textView.setTextColor(getResources().getColorStateList(R.color.text_selector_color));来设置。

  注意Android里TextView控件的一个小坑，用android:theme来设置样式时动态载入的layout会丢失该样式。
  比如在用ListView的时候，如果在List_Item的layout布局在用的是android:theme 而不是style的话，那么，显示的结果你会发现你的样式全没有了。改成style就ok了

  设置TextView的行间距（非行高）
  Android系统中TextView默认显示中文时会比较紧凑，不是很美观。为了让每行保持一定的行间距，可以设置属性android:lineSpacingExtra或android:lineSpacingMultiplier。
  1、android:lineSpacingExtra  设置行间距，如”3dp”。  2、android:lineSpacingMultiplier  设置行间距的倍数，如”1.2″。

  android-getTextSize返回值是以像素(px)为单位的,setTextSize()以sp为单位
  使用如下代码时，发现字号不会变大，反而会变小：
  size = (int) mText.getTextSize() + 1;
  mText.setTextSize(size);
  后来发现getTextSize返回值是以像素(px)为单位的，而setTextSize()是以sp为单位的，两者单位不一致才造成这样的结果。
  这里可以用setTextSize()的另外一种形式，可以指定单位：
  setTextSize(int unit, int size)
  TypedValue.COMPLEX_UNIT_PX : Pixels
  TypedValue.COMPLEX_UNIT_SP : Scaled Pixels
  TypedValue.COMPLEX_UNIT_DIP : Device Independent Pixels
  下面这样就正常了：
  size = (int) mText.getTextSize() + 1;
  mText.setTextSize(TypedValue.COMPLEX_UNIT_PX, size);

 3:--------------------ListView---------------------
 --ListView记得把layout_height属性设置成match_parent。若设置成"wrap_content"则会调用多次。
 --cacheColorHint="#00000000" 自定义listview的时候，不使用#00000000会出现选中一个空间黑色底色的情况.
 --当不使用android:listSelector属性，默认会显示选中的item为橙黄底色
 ---如果你的自定义ListViewItem中有Button或者Checkable的子类控件的话，那么默认focus是交给了子控件，而ListView的Item能被选中的基础是它能获取Focus，
 也就是说我们可以通过将ListView中Item中包含的所有控件的focusable属性设置为false，这样的话ListView的Item自动获得了Focus的权限，也就可以被选中了.
 或者父控件 设置android:descendantFocusability="blocksDescendants"

 VIEWPAGER和FRAGMENT的结合使用FRAGMENT里包含着LISTVIEW的常见问题
 在我们开发的过程中可能会遇到类似需求，我们需要做一个左右滑动的tab导航，这个时候有些朋友可能会想到viewpager和fragment的结合来实现这个功能；当然实现的方法不单单着一种。我们这个随笔讨论的是这种方式实现的效果、现在假如我们选中了服务这个列，服务列下有一个listview用来展示数据。然后滑动到第二个评价的fragment再到第三个商家fragment，或者是直接到最后一个fragment，然后再回来第一个fragment，我们会发现fragment刷新了一下。这里fragment重新create了，这个时候会发现listview的数据不对了。但我们并没有进行刷新操作！这个时候我们只需要重写适配器的
 　　@Override
         public void destroyItem(ViewGroup container, int position, Object object) {
             //super.destroyItem(container, position, object);
         }
 然后把super.destroyItem(container, position, object);注释掉，让fragment一直存在着。这样你再次运行会发现刚刚那个问题已经解决了、、该问题暂时描述到这里

Android AdapterView View的复用机制 分析
 设想1：拿ListView为例，如果ListView的ItemView复用机制，所有的ItemView复用同一个，如果在多线程下载图片的情况下，
 可能最终只有最后一个View显示图片吧，因为你前面的设置setTag(url)，后面马上就会将你的Tag的值覆盖掉，最终findViewByTag找到的都是最后一个。
 由此可见ListView缓存的不是一个，至少是一屏幕可显示的数量。也就是说ListView维护着一个ItemView的池子。
  跟大家解释下，为啥缓存了一个屏幕的可显示最大的ItemView数量的池子，我们可能上千个ItemView，仅依靠Tag就能实现不混乱呢。
在getView里面记得重置；比如图片，每次在getView首先设为默认的图片，然后再去加载实际的图；

 4:--------------------------坐标-----------------------
 坐标原点是左上角.
 getRowX：触摸点相对于屏幕的坐标
 getX： 触摸点相对于按钮的坐标
 getTop： 按钮左上角相对于父view（LinerLayout）的y坐标
 getLeft： 按钮左上角相对于父view（LinerLayout）的x坐标

 5:--------------------缓存 LruCache DisLruCache--------------------
 核心的类是LruCache (此类在android-support-v4的包中提供) 。
 这个类非常适合用来缓存图片，它的主要算法原理是把最近使用的对象用强引用存储在 LinkedHashMap 中，
 并且把最近最少使用的对象在缓存值达到预设定值之前从内存中移除。
  在过去，我们经常会使用一种非常流行的内存缓存技术的实现，即软引用或弱引用 (SoftReference or WeakReference)。
  但是现在已经不再推荐使用这种方式了，因为从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，
  这让软引用和弱引用变得不再可靠。另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，
  因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃。

 BitmapUtils内存缓存的核心类LruMemoryCache，LruMemoryCache代码和v4包的LruCache一样，只是加了一个存储超期的处理，这里分析LruCache源码。
 LRU即Least Recently Used，近期最少使用算法。也就是当内存缓存达到设定的最大值时将内存缓存中近期最少使用的对象移除，有效的避免了OOM的出现。
讲到LruCache不得不提一下LinkedHashMap，因为LruCache中Lru算法的实现就是通过LinkedHashMap来实现的。
LinkedHashMap继承于HashMap，它使用了一个双向链表来存储Map中的Entry顺序关系，这种顺序有两种，一种是LRU顺序，一种是插入顺序，
这可以由其构造函数public LinkedHashMap(int initialCapacity,float loadFactor, boolean accessOrder)指定。
所以，对于get、put、remove等操作，LinkedHashMap除了要做HashMap做的事情，还做些调整Entry顺序链表的工作。
LruCache中将LinkedHashMap的顺序设置为LRU顺序来实现LRU缓存，每次调用get(也就是从内存缓存中取图片)，则将该对象移到链表的尾端。
调用put插入新的对象也是存储在链表尾端，这样当内存缓存达到设定的最大值时，将链表头部的对象（近期最少用到的）移除。
关于LinkedHashMap详解请前往http://www.cnblogs.com/children/archive/2012/10/02/2710624.html。


6：-------------------各类框架的评价-------------------------------
 Volley被设计用于小的网络请求，所以像上传下载大文件什么的就不适合了，虽然网上已有相应的扩展，而且原生是没有文件上传的。
 Volley还有NetImageView，ImageLoader等和加载图片相关的，不过我个人习惯了使用UniversalImageLoader
 虽然网上都说Volley速度快，易于扩展，也给出了对比数据，但总归是要自己手工扩展，也没看出特别大的优势，和Android-Async-Http相比有一点不同就是2.3后使用了官方建议的HttpUrlConnection。
 还有一点最主要的应该就是Volley的缓存方法了，根据进行请求时服务器返回的缓存控制Header对请求结果进行缓存，下次请求时判断如果没有过期就直接使用缓存加快响应速度，如果需要会再次请求服务器进行刷新，如果服务器返回了304，表示请求的资源自上次请求缓存后还没有改变，这种情况就直接用缓存不用再次刷新页面，不过这要服务器支持了。
 当对上次的请求进行缓存后，在下次请求时即使没有网络也可以请求成功，关键的是，缓存的处理对用户完全是透明的，对于一些简单的情况会省去缓存相关的一些事情

 这个解决方案在2015年还重要吗？
 Volley/Gson的解决方案比较成熟，因为这是谷歌的解决方案，同时也因为出现在安卓开发者网站上，因此在2013到2014年都非常流行。到目前为止，这仍然是一个很好的选择，它是简单有效的。不过需要考虑一下的是Volley和Gson现在不怎么更新了。
  我们可以从速度，简便性，以及可自定义程度等因素上去分析比较不同解决方案，以帮助我们决定使用哪一种。
  你可能想尝试下一些其他的选择：
  Android 网络操作II: OkHttp, Retrofit, Moshi 以及Picasso. (即将发表)
  Android 网络操作III: ION (即将发表)

  volley里如果不使用NetworkImageView加载图片就会出现图片不停的闪烁，要切换好多次才才显示最终要显示的那一张，请问有什么办法可以解决这个问题吗？？？谢谢
  Re: zz_fly 2015-07-16 15:21发表 [回复]
  回复kinbos：使用的是ListView或者GridView显示图片的吧
  是会有这种现象，因为ListView或者GridView中Item是复用的，滚动列表的时候会导致同一个Item图片被设置了很多次
  Re: 嵌入式linux_走起 2015-01-01 09:56发表 [回复]
  回复kinbos： 设置个默认图片

  博主是否想过XML解析太麻烦了，每次都要写一段XML解析的代码，有没有可能用反射开发一个工具类，就像Gson一样，传入一个JavaBean实体类就可以解析出对象了？
  Re: guolin 2014-04-29 18:19发表 [回复] [引用] [举报]
  回复angerlie：说实话我曾经有想过写一个这样的开源库的，不过真正动起手来的时候你就会发现，这个任务很难完成，因为XML的数据结构比JSON要复杂很多，除了基本的结点、内容之外，还有结点属性、前缀、命名空间等等，这些都是没法映射到对象里面的，不像JSON那样简洁。
  Re: angerlie 2014-05-20 09:55发表 [回复] [引用] [举报]
  回复sinyu890807：恩，我同样遇到了这些困难。项目中为了节省带宽，改用Json了，于是没有在研究自动解析xml了。

  群主，当初刚做Android的时候拜读这系列文章，使用Volley下载图片显示在ListView里，更新界面的时候出现闪图的情况，急急忙忙加了你的群，在里面求问。但问题还是没解决，改了方案。。。。半年过去了，再次拜读，发现原因所在了-----Volley的缓存是文件缓存，没有内存缓存。
    哎，会想往事，不胜唏嘘
  Re: wyyl1 2015-06-15 22:04发表 [回复]
  回复_游离：我也遇到了相同的问题，后来在网上搜了一下，原来问题出在了sizeOf方法，之后重写了之后就好了mCache = new LruCache<String, Bitmap>(cacheSize) { @Override protected int sizeOf(String key, Bitmap bitmap) {// return bitmap.getRowBytes() * bitmap.getHeight(); return bitmap.getByteCount() / 1024; }
  Re: asdzheng 2015-01-23 14:30发表 [回复] [引用] [举报]
    回复_游离：我最近也被这个问题困惑着，我们用来保存图片的缓存不是用lrucache吗，而lrucache不是内存缓存么，怎么是文件缓存了呢？如有时间请回复一下，谢谢。
  Re: zg524495133 2015-01-30 14:34发表 [回复] [引用] [举报]
  回复asdzheng：默认是文件缓存哦内存缓存Lru是自己实现的

  比如一个新闻列表数据，第一次进入时候没有缓存就读取网络数据，并且放入缓存。但是第二次进入的时候会不会直接读缓存而不加载网络从而获取不到最新的数据呢？是不是进行了过期判断？ 里面有一个过期判断但是这部分没想太明白希望开导~~谢谢
  Re: 最怕认真 2015-02-02 00:39发表 [回复]
  回复zg524495133：我也想问这个问题啊。。。每次进入都要重新下载。但是有些图片就是万年不变的额。。
  Re: wikikii 2015-03-09 11:23发表 [回复]
  回复最怕认真：你可以自己写一个图片的缓存存起来，然后调用啊
  Re: lanhun7 2015-08-28 23:29发表 [回复]
  回复wikikii：第一次进入，没有缓存（getbitmap这里要自己实现如lrucache），再读取diskbasedcache,然后再读取网络。网络数据获取到后，先存到diskbasedcache，然后在存到你自己实现的lrucache，在putbitmap这个接口里面。最后再回调你自己的lisenter。
  当然过期，比如是获取图片getbitmap在这个之后所以这里就判断不了直接读的以前的。若你没自己缓存到自己的内存，那么过期了就直接申请网络的了

随着Android的发展，各路大神的贡献，我们可用的轮子越来越多。比如HTTP请求框架，有自家的Volley，Square的okhttp, async-http-lib, 还有聚合版的xUtils以及AFinal。我想你肯定用过其中一个。
当然Stay今天不是来科普的，而是来跟大家一起思考一个问题的。我们暂且不提他们在内部做了多少优化，我们就说lib的返回数据。
 在常用的http请求的返回值中，文件，JSON占绝大多数（图片有其他框架，这里不考虑）。文件下载都有专门的response，会帮你下载到制定路径，这个肯定都支持。那JSON呢？貌似都返回一个JSONObject或者JSONArray。
 我去，做好事得做全啊，返回JSONObject是个什么鬼，难道还得自己动手写解析反序列化成自己要得对象？那是最低级的程序员干的事。好在我们都不傻，还有GSON，fastJson，Jackson帮我们来完成这步转化。


 Volley的源代码存放在这里，你可以用git clone直接获取：
 git clone https://android.googlesource.com/platform/frameworks/volley
 在下载后的代码目录中适用”ant jar”命令完成编译，会生成volley.jar包，这样你就能在Eclipse或Android Studio中适用啦。

 7:-------------------Sqlite操作框架的评价--------------------------
 最近开发的一个项目主要有两个特点，这两点也是在项目开发前需要着重去规划解决方案的：
 需要和Rest服务端请求大量的数据
 同时这些数据本地也要保存到sqlite数据库
 对于第一点，目前的Volley、Gson等框架既可以解决从服务端请求数据拉下Json数据并解析成java对象的全过程。但是对于第二点，就有点头疼了。
 因为Android开发也是用Java语言，所以Android平台上涌现了一些Android的ORM框架，比如ORMLite、GreenDao、SugarORM，ORMLite并不是专为Android打造的，GreenDao据称性能比较高，但是有重大的缺陷，这里后面会说到。所以最后选用了SugarORM这个框架，同时SugarORM一直在更新维护，所以也推荐使用这个框架。
 它具有下列优点：
 不用写复杂的sql语句，而用简单的API即可完成创建和操纵数据
 可以在原有的Bean上仅仅添加小的修改而复用Bean
 简化而明了的数据库设计和创建过程，同时提供表的一对多的支持
 SugarORM在github上的官网为：
 http://satyan.github.io/sugar/index.html

 SugarORM中Bean可复用Gson的Bean
 SugarORM最大的好处是，用于创建表的Bean是你自己可以定义的，这点相对于GreenDao而言是不言而喻的。GreenDao是自动帮你创建了bean类，但是如果这个Bean你又需要用来解析网络拉下来的Json数据，那么就有问题了。
 我们知道Gson也是通过Bean对象来解析Json数据的，但是Gson支持在Bean中的属性上加一些注解（比如@Expose这个注解）。那么这里你可能想到解析Json所用的bean和储存数据库所用的bean能共用，那么这里的存储数据库的bean因为需要加一些gson或者别的框架的注解，就不能让ORM框架来自动生成了。所以， GeenDao没法使用。
 开发中注意的地方
 命名问题
 数据库更改的问题
 第一个问题是本文开头所提到的“Bean的属性名所采用驼峰命名法，那么大写的字母会在创建的表中字段转换成下划线”这个问题，从SugarORM公布的源码里面能看到它是自己加上的"_"而并不是一个bug，这里可能是为了想和java web的一些开发方式保持一致吧，或许是为了规避sqlite对大小写敏感而导致的各种问题而引入的这种策略。所以开发者在用SugarORM的时候要注意命名的改变。你在Bean中写了一个属性名，而数据库中的字段名并不是这个。当然了，这里可以通过@Column注解来搞定
  第二个问题是一个习惯性问题。开发中由于不用直接操作SqliteDataBase这种类型的类了，所以多人同时开发的时候某个人提交代码的时候只是修改了他所负责的表的对应的Bean的结构，而这个时候你再更新代码在重新安装Apk后会发现报错，比如找不到某个表的字段的错。这个是因为表结构改了，所以你不得不先卸载原来的应用而重新安装apk。所以这里最好在多人开发的时候养成一个习惯：某个人修改了某个Bean后（即更新了表结构）一定要通知其他人


8:  ---------------app--------------
  在默认情况下同一app的所有组件都是运行在同一进程中的，而且大多数app并不需要去更改这个设定。
  但如果我们真的需要指定进程来运行特定组件，那么可以在manifest文件中设置。我们在manifest文件中定义了各个组件，
  例如activity，service，receiver，provider等等，我们可以设置process属性来指定一个新线程来运行该组件。
  通过设置process属性，我们可以设置每个组件都运行在不同的进程中，也可以指定几个组件运行在同一个进程中。
  我们甚至可以设置不同来自app的组件运行在同一个进程中（通过指定相同的process属性并共享相同的user ID）。
  之前的文章中提到，Android系统启动后会载入通用的framework的代码与资源之后，启动一个Zygote进程。
  为了启动一个新的程序进程，系统会fork Zygote进程生成一个新的进程，然后在新的进程中加载并运行应用程序的代码。
  这就使得大多数的RAM pages被用来分配给framework的代码，同时促使RAM资源能够在应用的所有进程之间进行共享。
  1、前台进程foreground process
  当前正在与用户交互的进程。如果一个进程P满足如下任意一个条件，则进程P被称为前台进程：
  当前正在与用户交互(调用过resume方法)的activity在进程P中运行
  某个service与当前正在与用户交互的activity相互绑定，该service运行于进程P中
  某个service调用了startForeground()方法，该service运行在进程P中
  某个service正在执行某个生命周期的回调方法，该service运行在进程P中
  某个broadcastReceiver正在执行它的onReceive函数，该broadcastReceiver运行在进程P中

  2、可见进程Visable process
 没有任何前台组件在此进程中运行，但是仍然可以影响到用户所看到的屏幕。如果进程P满足以下任意一个条件，则进程P被称为可见进程：
  某个activity并不运行于前台，但仍能被用户所见(调用了pause方法)，activity运行于进程P中。例如某activity启动了一个dialog，仍然可以看到该activity。
  如果某个service与visible activity或foreground activity绑定，该service运行于进程P中。
  3、服务进程service process
  4、后台进程background process
  5、空进程    empty process

  -An activity has one or more windows (e.g. dialogs)
  -A window has one or more surfaces (e.g. surface views)
  -However, in window manager, a window is called a session
  -A surface is called a window
  -And an activity becomes roughly a token


  9:---------------------------------bitmap----------------------------------
  需要注意的是inBitmap只能在3.0以后使用。2.3上，bitmap的数据是存储在native的内存区域，并不是在Dalvik的内存堆上。
  在android3.0开始，系统在BitmapFactory.Options里引入了inBitmap机制来配合缓存机制。如果在载入图片时传入了inBitmap那么载入的图片就是inBitmap里的值。
  这样可以统一有缓存和无缓存的载入方式。
  使用inBitmap，在4.4之前，只能重用相同大小的bitmap的内存区域，而4.4之后你可以重用任何bitmap的内存区域，只要这块内存比将要分配内存的bitmap大就可以。
  例如给inBitmap赋值的图片大小为100-100，那么新申请的bitmap必须也为100-100才能够被重用。
  从SDK 19开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。

  10:--------------------------------Looper , Handler , Message---------------------------
  今天有人问我，你说Handler的post方法创建的线程和UI线程有什么关系？
  其实这个问题也是出现这篇博客的原因之一；这里需要说明，有时候为了方便，我们会直接写如下代码：
  [java] view plaincopy在CODE上查看代码片派生到我的代码片
  mHandler.post(new Runnable()
          {
              @Override
              public void run()
              {
                  Log.e("TAG", Thread.currentThread().getName());
                  mTxt.setText("yoxi");
              }
          });

  然后run方法中可以写更新UI的代码，其实这个Runnable并没有创建什么线程，而是发送了一条消息，下面看源码：
  [java] view plaincopy在CODE上查看代码片派生到我的代码片
  public final boolean post(Runnable r)
     {
        return  sendMessageDelayed(getPostMessage(r), 0);
     }
  [java] view plaincopy在CODE上查看代码片派生到我的代码片
  private static Message getPostMessage(Runnable r) {
        Message m = Message.obtain();
        m.callback = r;
        return m;
    }
  可以看到，在getPostMessage中，得到了一个Message对象，然后将我们创建的Runable对象作为callback属性，赋值给了此message.
  注：产生一个Message对象，可以new  ，也可以使用Message.obtain()方法；
  两者都可以，但是更建议使用obtain方法，因为Message内部维护了一个Message池用于Message的复用，避免使用new 重新分配内存。
  可以看到，这里msg的callback和target都有值，那么会执行哪个呢？
  其实上面已经贴过代码，就是dispatchMessage方法：

  [java] view plaincopy在CODE上查看代码片派生到我的代码片
  public void dispatchMessage(Message msg) {
         if (msg.callback != null) {
             handleCallback(msg);
         } else {
             if (mCallback != null) {
                 if (mCallback.handleMessage(msg)) {
                     return;
                 }
             }
             handleMessage(msg);
         }
     }
  第2行，如果不为null，则执行callback回调，也就是我们的Runnable对象。


11: ----------------------------String---------------------------------------
2、正确使用String，避免创建不必要的对象
很多人面试的时候都遇到过这样的问题：String s = new String("abc")；请问创建了几个对象。也从侧面说明了这是个反面的代码写法：
a、String s = new String("abc")；“abc”本身就是一个String的实例，所以new String创建了不必要的String实例
b、如果改写成 String s = "abc"，不仅只创建了一个实例，而且在同一台VM中，对于“abc”（字符串的字面常量）还会重用。



12:----------------------------Android v4、v7、v13 的区别-------------------------------------
Android Support v4:  这个包是为了照顾1.6及更高版本而设计的，这个包是使用最广泛的，eclipse新建工程时，都默认带有了。
Android Support v7:  这个包是为了考虑照顾2.1及以上版本而设计的，但不包含更低，故如果不考虑1.6,我们可以采用再加上这个包，另外注意，v7是要依赖v4这个包的，即，两个得同时被包含。
Android Support v13  :这个包的设计是为了android 3.2及更高版本的，一般我们都不常用，平板开发中能用到。
1、为什么还要用V7呢？V4向下兼容的版本不是更多吗？
    V7版本不是为了提供一些V4提供不了的内容，它不是补丁。V7以后你如果创建一个工程，它给你创建的都是FragmentActivity了。
     也就是说，以后Android开发所有的界面都可以是碎片模式了。V7是一种新的框架和更优解决方案.



13：---------------------android 源码分析--------------------
**  一段精彩的位与计算应用。** MeasureSpec  代表一个 32 位 int 值   高 2 位代表 SpecMode ，低 30 位代表 SpecSize
private static final int MODE_SHIFT = 30;
private static final int MODE_MASK = 0x3 << MODE_SHIFT;
public static final int UNSPECIFIED = 0 << MODE_SHIFT;
public static final int EXACTLY = 1 << MODE_SHIFT;
public static final int AT_MOST = 2 << MODE_SHIFT;
public static int makeMeasureSpec(int size, int mode) {
	if (sUseBrokenMakeMeasureSpec) {		return size + mode;	}
	else {		return (size & ~MODE_MASK) | (mode & MODE_MASK);	}}
public static int getMode(int measureSpec) {	return (measureSpec & MODE_MASK);}
public static int getSize(int measureSpec) {	return (measureSpec & ~MODE_MASK);}

在渲染前获取 View 的宽高。这是一个比较有意义的问题，或者说有难度的问题，
问题的背景为：有时候我们需要在view渲染前去获取其宽高，典型的情形是，我们想在onCreate、onStart、onResume中去获取view的宽高。
如果大家尝试过，会发现，这个时候view还没有measure好，宽高都为0，那到底该怎么做才能正确获取其宽高呢，下面给出三种方法
Activity/View#onWindowFocusChanged ：这个方法表明，view已经初始化完毕了，宽高已经准备好了
view.post(runnable) ：通过post可以将一个runnable投递到消息队列的尾部，然后等待looper调用此runnable的时候，view也已经初始化好了
view.measure(int widthMeasureSpec, int heightMeasureSpec) ：通过手动去measure来视图得到view的宽高

14:----------------splash 界面的主要作用--------------
现在大部分APP都有Splash界面，下面列一下Splash页面的几个作用：
1、展示logo,提高公司形象
2、初始化数据 (拷贝数据到SD)
3、提高用户体验
4、连接服务器是否有新的版本等。

15：-------------定位相关-------------------

国家测绘局标准
new LocationClientOption().setCoorType ("gcj02")
百度经纬度标准
new LocationClientOption().setCoorType ("bd09ll")
百度墨卡托标准
new LocationClientOption().setCoorType ("bd09")
